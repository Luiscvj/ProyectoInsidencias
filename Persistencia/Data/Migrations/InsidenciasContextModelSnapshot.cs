// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(InsidenciasContext))]
    partial class InsidenciasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Area", b =>
                {
                    b.Property<int>("AreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.HasKey("AreaID");

                    b.ToTable("area", (string)null);
                });

            modelBuilder.Entity("Arl", b =>
                {
                    b.Property<int>("ArlID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("ArlID");

                    b.ToTable("arl", (string)null);
                });

            modelBuilder.Entity("Categoria", b =>
                {
                    b.Property<int>("CategoriaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TipoCategoria")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.HasKey("CategoriaID");

                    b.ToTable("categoria", (string)null);
                });

            modelBuilder.Entity("Ciudad", b =>
                {
                    b.Property<int>("CiudadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.HasKey("CiudadId");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("ciudad", (string)null);
                });

            modelBuilder.Entity("ContactoArl", b =>
                {
                    b.Property<int>("ArlId")
                        .HasColumnType("int");

                    b.Property<int>("TipoContactoId")
                        .HasColumnType("int");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ArlId", "TipoContactoId");

                    b.HasIndex("TipoContactoId");

                    b.ToTable("contacto_arl", (string)null);
                });

            modelBuilder.Entity("ContactoEps", b =>
                {
                    b.Property<int>("EpsId")
                        .HasColumnType("int");

                    b.Property<int>("TipoContactoId")
                        .HasColumnType("int");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EpsId", "TipoContactoId");

                    b.HasIndex("TipoContactoId");

                    b.ToTable("contacto_eps", (string)null);
                });

            modelBuilder.Entity("Departamento", b =>
                {
                    b.Property<int>("DepartamentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreDep")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("DepartamentoID");

                    b.HasIndex("PaisId");

                    b.ToTable("departamento", (string)null);
                });

            modelBuilder.Entity("Direccion", b =>
                {
                    b.Property<int>("DireccionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Letra")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<int>("NroViaSecundaria")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("Numero")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<string>("SufijoCardinal")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SufijoCardinalSecundario")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TipoVia")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("DireccionID");

                    b.ToTable("direccion", (string)null);
                });

            modelBuilder.Entity("Elemento", b =>
                {
                    b.Property<int>("ElementoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NombreElemento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("ElementoID");

                    b.HasIndex("CategoriaId");

                    b.ToTable("elemento", (string)null);
                });

            modelBuilder.Entity("ElementoPuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ElementoId")
                        .HasColumnType("int");

                    b.Property<int>("PuestoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElementoId");

                    b.HasIndex("PuestoId");

                    b.ToTable("elemento_puesto", (string)null);
                });

            modelBuilder.Entity("ElementoPuestoInsidencia", b =>
                {
                    b.Property<int>("ElementoPuestosId")
                        .HasColumnType("int");

                    b.Property<int>("InsidenciasInsidenciaID")
                        .HasColumnType("int");

                    b.HasKey("ElementoPuestosId", "InsidenciasInsidenciaID");

                    b.HasIndex("InsidenciasInsidenciaID");

                    b.ToTable("elementos_puesto_insidencia", (string)null);
                });

            modelBuilder.Entity("Eps", b =>
                {
                    b.Property<int>("EpsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("EpsID");

                    b.ToTable("eps", (string)null);
                });

            modelBuilder.Entity("Estudiante", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("CiudadId")
                        .HasColumnType("int");

                    b.Property<int>("DireccionId")
                        .HasColumnType("int");

                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("TipoPersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CiudadId");

                    b.HasIndex("DireccionId");

                    b.HasIndex("GeneroId");

                    b.HasIndex("TipoPersonaId");

                    b.ToTable("estudiante", (string)null);
                });

            modelBuilder.Entity("Genero", b =>
                {
                    b.Property<int>("GeneroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TipoGeneros")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("GeneroID");

                    b.ToTable("genero", (string)null);
                });

            modelBuilder.Entity("Insidencia", b =>
                {
                    b.Property<int>("InsidenciaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("FechaReporte")
                        .HasColumnType("date");

                    b.Property<int>("Tipo_GravedadId")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("InsidenciaID");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("Tipo_GravedadId");

                    b.HasIndex("TrainerId");

                    b.ToTable("insidencia", (string)null);
                });

            modelBuilder.Entity("Pais", b =>
                {
                    b.Property<int>("PaisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.HasKey("PaisID");

                    b.ToTable("Pais", (string)null);
                });

            modelBuilder.Entity("Puesto", b =>
                {
                    b.Property<int>("PuestoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("PuestoID");

                    b.HasIndex("SalonId");

                    b.ToTable("puesto", (string)null);
                });

            modelBuilder.Entity("Salon", b =>
                {
                    b.Property<int>("SalonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("SalonID");

                    b.HasIndex("AreaId");

                    b.ToTable("salon", (string)null);
                });

            modelBuilder.Entity("SesionUso", b =>
                {
                    b.Property<string>("EstudianteId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("PuestoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.HasKey("EstudianteId", "PuestoID");

                    b.HasIndex("PuestoID");

                    b.ToTable("sesion_uso", (string)null);
                });

            modelBuilder.Entity("TipoContacto", b =>
                {
                    b.Property<int>("TipoContactoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreTipo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("TipoContactoID");

                    b.ToTable("tipo_contacto", (string)null);
                });

            modelBuilder.Entity("TipoPersona", b =>
                {
                    b.Property<int>("TipoPersonaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Tipo_persona")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("TipoPersonaID");

                    b.ToTable("tipo_persona", (string)null);
                });

            modelBuilder.Entity("Tipo_Gravedad", b =>
                {
                    b.Property<int>("Tipo_GravedadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Rubrica")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("TipoGravedad")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Tipo_GravedadID");

                    b.ToTable("tipo_gravedad", (string)null);
                });

            modelBuilder.Entity("Trainer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("ArlId")
                        .HasColumnType("int");

                    b.Property<int>("CiudadId")
                        .HasColumnType("int");

                    b.Property<int>("DireccionId")
                        .HasColumnType("int");

                    b.Property<int>("EpsId")
                        .HasColumnType("int");

                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("TipoPersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArlId");

                    b.HasIndex("CiudadId");

                    b.HasIndex("DireccionId");

                    b.HasIndex("EpsId");

                    b.HasIndex("GeneroId");

                    b.HasIndex("TipoPersonaId");

                    b.ToTable("trainer", (string)null);
                });

            modelBuilder.Entity("Ciudad", b =>
                {
                    b.HasOne("Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("ContactoArl", b =>
                {
                    b.HasOne("Arl", null)
                        .WithMany("ContactosArl")
                        .HasForeignKey("ArlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TipoContacto", null)
                        .WithMany("ContactosArl")
                        .HasForeignKey("TipoContactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContactoEps", b =>
                {
                    b.HasOne("Eps", null)
                        .WithMany("ContactosEps")
                        .HasForeignKey("EpsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TipoContacto", null)
                        .WithMany("ContactosEps")
                        .HasForeignKey("TipoContactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Departamento", b =>
                {
                    b.HasOne("Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Elemento", b =>
                {
                    b.HasOne("Categoria", "Categoria")
                        .WithMany("Elementos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("ElementoPuesto", b =>
                {
                    b.HasOne("Elemento", null)
                        .WithMany()
                        .HasForeignKey("ElementoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puesto", null)
                        .WithMany()
                        .HasForeignKey("PuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElementoPuestoInsidencia", b =>
                {
                    b.HasOne("ElementoPuesto", null)
                        .WithMany()
                        .HasForeignKey("ElementoPuestosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insidencia", null)
                        .WithMany()
                        .HasForeignKey("InsidenciasInsidenciaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Estudiante", b =>
                {
                    b.HasOne("Ciudad", "Ciudad")
                        .WithMany()
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Direccion", "Direccion")
                        .WithMany("Estudiantes")
                        .HasForeignKey("DireccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genero", "Genero")
                        .WithMany("Estudiantes")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TipoPersona", "TipoPersona")
                        .WithMany()
                        .HasForeignKey("TipoPersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");

                    b.Navigation("Direccion");

                    b.Navigation("Genero");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Insidencia", b =>
                {
                    b.HasOne("Categoria", "Categoria")
                        .WithMany("Insidencias")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tipo_Gravedad", "Tipo_Gravedad")
                        .WithMany("Insidencias")
                        .HasForeignKey("Tipo_GravedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trainer", "Trainer")
                        .WithMany("Insidencias")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Tipo_Gravedad");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Puesto", b =>
                {
                    b.HasOne("Salon", "Salon")
                        .WithMany("Puestos")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("Salon", b =>
                {
                    b.HasOne("Area", "Area")
                        .WithMany("Salones")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("SesionUso", b =>
                {
                    b.HasOne("Estudiante", null)
                        .WithMany("SesionUsos")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puesto", null)
                        .WithMany("SesionUsos")
                        .HasForeignKey("PuestoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trainer", b =>
                {
                    b.HasOne("Arl", "Arl")
                        .WithMany("Trainers")
                        .HasForeignKey("ArlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ciudad", "Ciudad")
                        .WithMany("Trainers")
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Direccion", "Direccion")
                        .WithMany("Trainers")
                        .HasForeignKey("DireccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eps", "Eps")
                        .WithMany("Trainers")
                        .HasForeignKey("EpsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Genero", "Genero")
                        .WithMany("Trainers")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TipoPersona", "TipoPersona")
                        .WithMany("Trainers")
                        .HasForeignKey("TipoPersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arl");

                    b.Navigation("Ciudad");

                    b.Navigation("Direccion");

                    b.Navigation("Eps");

                    b.Navigation("Genero");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Area", b =>
                {
                    b.Navigation("Salones");
                });

            modelBuilder.Entity("Arl", b =>
                {
                    b.Navigation("ContactosArl");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Categoria", b =>
                {
                    b.Navigation("Elementos");

                    b.Navigation("Insidencias");
                });

            modelBuilder.Entity("Ciudad", b =>
                {
                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Direccion", b =>
                {
                    b.Navigation("Estudiantes");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Eps", b =>
                {
                    b.Navigation("ContactosEps");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Estudiante", b =>
                {
                    b.Navigation("SesionUsos");
                });

            modelBuilder.Entity("Genero", b =>
                {
                    b.Navigation("Estudiantes");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Puesto", b =>
                {
                    b.Navigation("SesionUsos");
                });

            modelBuilder.Entity("Salon", b =>
                {
                    b.Navigation("Puestos");
                });

            modelBuilder.Entity("TipoContacto", b =>
                {
                    b.Navigation("ContactosArl");

                    b.Navigation("ContactosEps");
                });

            modelBuilder.Entity("TipoPersona", b =>
                {
                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Tipo_Gravedad", b =>
                {
                    b.Navigation("Insidencias");
                });

            modelBuilder.Entity("Trainer", b =>
                {
                    b.Navigation("Insidencias");
                });
#pragma warning restore 612, 618
        }
    }
}
